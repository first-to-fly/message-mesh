name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  BUN_VERSION: "1.2.12"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: extract-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Releasing version: $VERSION"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run full test suite
        run: |
          bun run typecheck
          bun run lint
          bun test
          bun run build

      - name: Validate package.json version
        run: |
          PACKAGE_VERSION=$(bun run --silent -e "console.log(require('./package.json').version)")
          if [ "$PACKAGE_VERSION" != "${{ steps.extract-version.outputs.version }}" ]; then
            echo "‚ùå Package.json version ($PACKAGE_VERSION) doesn't match release version (${{ steps.extract-version.outputs.version }})"
            exit 1
          fi
          echo "‚úÖ Package.json version matches release version"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build

      - name: Create tarball
        run: |
          # Create a clean package for distribution
          mkdir -p release-artifacts
          
          # Copy essential files
          cp -r dist release-artifacts/
          cp package.json release-artifacts/
          cp README.md release-artifacts/
          cp LICENSE release-artifacts/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create tarball
          cd release-artifacts
          tar -czf ../message-mesh-${{ needs.validate.outputs.version }}.tgz .
          cd ..

      - name: Generate checksums
        run: |
          sha256sum message-mesh-${{ needs.validate.outputs.version }}.tgz > checksums.txt
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            message-mesh-*.tgz
            checksums.txt
          retention-days: 30

  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment: npm-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set registry https://registry.npmjs.org/

      - name: Publish to npm
        run: |
          if [ "${{ needs.validate.outputs.is-prerelease }}" = "true" ]; then
            echo "Publishing prerelease to npm with beta tag"
            npm publish --tag beta
          else
            echo "Publishing release to npm with latest tag"
            npm publish
          fi

      - name: Verify publication
        run: |
          sleep 30  # Wait for npm to propagate
          PUBLISHED_VERSION=$(npm view message-mesh version)
          if [ "$PUBLISHED_VERSION" = "${{ needs.validate.outputs.version }}" ]; then
            echo "‚úÖ Successfully published version ${{ needs.validate.outputs.version }}"
          else
            echo "‚ùå Publication verification failed"
            exit 1
          fi

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, npm-publish]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation (can be enhanced with conventional commits)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body: |
            # Message-Mesh v${{ needs.validate.outputs.version }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ```bash
            npm install message-mesh@${{ needs.validate.outputs.version }}
            # or
            bun add message-mesh@${{ needs.validate.outputs.version }}
            ```
            
            ## Verification
            
            SHA256 checksums:
            ```
            $(cat checksums.txt)
            ```
            
            ## Documentation
            
            - [API Reference](https://github.com/${{ github.repository }}/blob/v${{ needs.validate.outputs.version }}/docs/api-reference.md)
            - [Getting Started](https://github.com/${{ github.repository }}/blob/v${{ needs.validate.outputs.version }}/docs/getting-started.md)
            
          files: |
            message-mesh-*.tgz
            checksums.txt
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          draft: false

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: always()
    
    steps:
      - name: Release Success Notification
        if: needs.github-release.result == 'success'
        run: |
          echo "üéâ Release v${{ needs.validate.outputs.version }} completed successfully!"
          echo "üì¶ Published to NPM: https://www.npmjs.com/package/message-mesh"
          echo "üè∑Ô∏è GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"

      - name: Release Failure Notification
        if: needs.github-release.result == 'failure'
        run: |
          echo "‚ùå Release v${{ needs.validate.outputs.version }} failed!"
          echo "Please check the workflow logs for details."
          exit 1